
/* Auto generated by Glue Client Compiler tool (gluec) 
on 4/24/2016 1:44:08 AM at CNONIM-HP by cNoNim
Do not modify this file by hand if you plan to regenerate this file again by the tool as manual changes will be lost
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

using NFX.Glue;
using NFX.Glue.Protocol;


namespace NetworkCache.Clients
{
  ///<summary>
  /// Client for glued contract NetworkCache.Services.ICache server.
  /// Each contract method has synchronous and asynchronous versions, the later denoted by 'Async_' prefix.
  /// May inject client-level inspectors here like so:
  ///   client.MsgInspectors.Register( new YOUR_CLIENT_INSPECTOR_TYPE());
  ///</summary>
  public class CacheClient : ClientEndPoint, @NetworkCache.@Services.@ICache
  {

  #region Static Members

     private static TypeSpec s_ts_CONTRACT;
     private static MethodSpec @s_ms_Echo_0;
     private static MethodSpec @s_ms_Get_1;
     private static MethodSpec @s_ms_Put_2;
     private static MethodSpec @s_ms_Delete_3;

     //static .ctor
     static CacheClient()
     {
         var t = typeof(@NetworkCache.@Services.@ICache);
         s_ts_CONTRACT = new TypeSpec(t);
         @s_ms_Echo_0 = new MethodSpec(t.GetMethod("Echo", new Type[]{ typeof(@System.@Object) }));
         @s_ms_Get_1 = new MethodSpec(t.GetMethod("Get", new Type[]{ typeof(@System.@String), typeof(@System.@String) }));
         @s_ms_Put_2 = new MethodSpec(t.GetMethod("Put", new Type[]{ typeof(@System.@String), typeof(@System.@Object), typeof(@System.@String) }));
         @s_ms_Delete_3 = new MethodSpec(t.GetMethod("Delete", new Type[]{ typeof(@System.@String), typeof(@System.@String) }));
     }
  #endregion

  #region .ctor
     public CacheClient(string node, Binding binding = null) : base(node, binding) { ctor(); }
     public CacheClient(Node node, Binding binding = null) : base(node, binding) { ctor(); }
     public CacheClient(IGlue glue, string node, Binding binding = null) : base(glue, node, binding) { ctor(); }
     public CacheClient(IGlue glue, Node node, Binding binding = null) : base(glue, node, binding) { ctor(); }

     //common instance .ctor body
     private void ctor()
     {

     }

  #endregion

     public override Type Contract
     {
       get { return typeof(@NetworkCache.@Services.@ICache); }
     }



  #region Contract Methods

         ///<summary>
         /// Synchronous invoker for  'NetworkCache.Services.ICache.Echo'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@System.@Object' or RemoteExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @System.@Object @Echo(@System.@Object  @data)
         {
            var call = Async_Echo(@data);
            return call.GetValue<@System.@Object>();
         }

         ///<summary>
         /// Asynchronous invoker for  'NetworkCache.Services.ICache.Echo'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or RemoteExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_Echo(@System.@Object  @data)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_Echo_0, false, RemoteInstance, new object[]{@data});
            return DispatchCall(request);
         }



         ///<summary>
         /// Synchronous invoker for  'NetworkCache.Services.ICache.Get'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@System.@Object' or RemoteExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @System.@Object @Get(@System.@String  @key, @System.@String  @table)
         {
            var call = Async_Get(@key, @table);
            return call.GetValue<@System.@Object>();
         }

         ///<summary>
         /// Asynchronous invoker for  'NetworkCache.Services.ICache.Get'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or RemoteExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_Get(@System.@String  @key, @System.@String  @table)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_Get_1, false, RemoteInstance, new object[]{@key, @table});
            return DispatchCall(request);
         }



         ///<summary>
         /// Synchronous invoker for  'NetworkCache.Services.ICache.Put'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@System.@Boolean' or RemoteExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @System.@Boolean @Put(@System.@String  @key, @System.@Object  @data, @System.@String  @table)
         {
            var call = Async_Put(@key, @data, @table);
            return call.GetValue<@System.@Boolean>();
         }

         ///<summary>
         /// Asynchronous invoker for  'NetworkCache.Services.ICache.Put'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or RemoteExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_Put(@System.@String  @key, @System.@Object  @data, @System.@String  @table)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_Put_2, false, RemoteInstance, new object[]{@key, @data, @table});
            return DispatchCall(request);
         }



         ///<summary>
         /// Synchronous invoker for  'NetworkCache.Services.ICache.Delete'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning '@System.@Boolean' or RemoteExceptionData instance.
         /// ClientCallException is thrown if the call could not be placed in the outgoing queue.
         /// RemoteException is thrown if the server generated exception during method execution.
         ///</summary>
         public @System.@Boolean @Delete(@System.@String  @key, @System.@String  @table)
         {
            var call = Async_Delete(@key, @table);
            return call.GetValue<@System.@Boolean>();
         }

         ///<summary>
         /// Asynchronous invoker for  'NetworkCache.Services.ICache.Delete'.
         /// This is a two-way call per contract specification, meaning - the server sends the result back either
         ///  returning no exception or RemoteExceptionData instance.
         /// CallSlot is returned that can be queried for CallStatus, ResponseMsg and result.
         ///</summary>
         public CallSlot Async_Delete(@System.@String  @key, @System.@String  @table)
         {
            var request = new RequestAnyMsg(s_ts_CONTRACT, @s_ms_Delete_3, false, RemoteInstance, new object[]{@key, @table});
            return DispatchCall(request);
         }


  #endregion

  }//class
}//namespace
